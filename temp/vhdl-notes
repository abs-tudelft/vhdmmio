# Handshaking logic

w_req   - write request that can respond immediately is present

# Logic to widen to max logical register size
w_addr = awl.addr
if w_req
  if w_prot != awl.prot
    w_data = 0
    w_strb = 0
  w_prot = awl.prot
  # generated:
  w_data(range) = wl.data
  w_strb(range) = wl.strb
  w_ack = true
  if w_addr not the last register of a multiword:
    w_

w_addr  - write request address if w_req/w_lreq
w_data  - write request data if w_req/w_lreq
w_strb  - write request bit-strobe if w_req/w_lreq
w_prot  - write request prot if w_req/w_lreq

# Lookahead/deferring logic
if fifo full:
  w_req = false
elif fifo not empty:
  w_rreq = true
  w_rtag = head of fifo
  w_lreq = w_req
  w_req = false

w_lreq  - lookahead write request is present (can only defer)
w_rreq  - write response request: previously deferred request is pending (can only ack/nack)
w_rtag  - write tag belonging to the previously deferred request if w_rreq

# Field logic

if r_ack

w_ack   - set to send a positive write response
w_nack  - set to send an write error response
w_block - set to block this write request; above vars will be presented again during the next clock
w_defer - set to defer this write request
w_dtag  - tag to defer the write request with



.------------------------------------------------------------------------------.
| req | lrq | rrq || ack | nck | blk | def || request  | response | defer FIFO |
|-----+-----+-----||-----+-----+-----+-----||----------+----------+------------|
|  0  |  0  |  0  ||  0  |  0  |  0  |  0  ||          |          |            |
|-----+-----+-----||-----+-----+-----+-----||----------+----------+------------|
|  1  |  0  |  0  ||  0  |  0  |  0  |  0  || accept   | dec_err  |            |
|  1  |  0  |  0  ||  1  |  0  |  0  |  0  || accept   | ack      |            |
|  1  |  0  |  0  ||  -  |  1  |  0  |  0  || accept   | slv_err  |            |
|  1  |  0  |  0  ||  -  |  -  |  1  |  0  ||          |          |            |
|  1  |  0  |  0  ||  -  |  -  |  -  |  1  || accept   |          | push       |
|-----+-----+-----||-----+-----+-----+-----||----------+----------+------------|
|  0  |  0  |  1  ||  0  |  0  |  0  |  -  ||          |          |            |
|  0  |  0  |  1  ||  1  |  0  |  0  |  -  ||          | ack      | pop        |
|  0  |  0  |  1  ||  -  |  1  |  0  |  -  ||          | slv_err  | pop        |
|-----+-----+-----||-----+-----+-----+-----||----------+----------+------------|
|  0  |  1  |  1  ||  0  |  0  |  0  |  -  ||          |          |            |
|  0  |  1  |  1  ||  1  |  0  |  0  |  -  ||          | ack      | pop        |
|  0  |  1  |  1  ||  -  |  1  |  0  |  -  ||          | slv_err  | pop        |
|  0  |  1  |  1  ||  -  |  -  |  1  |  -  ||          |          |            |
|  0  |  1  |  1  ||  -  |  -  |  -  |  1  || accept   |          | push       |
'------------------------------------------------------------------------------'


.------------------------------------------------------------------------------.
| req | lrq | rrq || ack | nck | blk | def || request  | response | defer FIFO |
|-----+-----+-----||-----+-----+-----+-----||----------+----------+------------|
|  -  |  -  |  1  ||  -  |  1  |  0  |  -  ||          | slv_err  | pop        | if rreq:           if nack:
|  -  |  -  |  1  ||  1  |  0  |  0  |  -  ||          | ack      | pop        |                    elif ack:
|  -  |  -  |  -  ||  -  |  -  |  -  |  1  || accept   |          | push       | if defer:
|  1  |  -  |  -  ||  -  |  1  |  0  |  0  || accept   | slv_err  |            | elif !block & req: if nack:
|  1  |  -  |  -  ||  1  |  0  |  0  |  0  || accept   | ack      |            |                    elif ack:
|  1  |  -  |  -  ||  0  |  0  |  0  |  0  || accept   | dec_err  |            |                    else:
'------------------------------------------------------------------------------'










